{"version":3,"sources":["../../src/js/playgroove.js"],"names":[],"mappings":"AAAA;;;AAGA;;;;;;IACM,U;AAEF,wBAAY,KAAZ,EAAmB,OAAnB,EAA4B;AAAA;;AAExB,aAAK,KAAL,GAAa,KAAb;AACA,aAAK,OAAL,GAAe,OAAf;AACA,aAAK,GAAL,GAAW,KAAK,OAAL,CAAa,kBAAb,EAAX;AACA,aAAK,KAAL,GAAa,KAAK,OAAL,CAAa,WAAb,CAAyB,GAAzB,CAAb;AACA,aAAK,QAAL,GAAgB,KAAK,OAAL,CAAa,UAAb,EAAhB;AACA,aAAK,MAAL,GAAc,KAAK,OAAL,CAAa,UAAb,EAAd;;AAEA,aAAK,KAAL,GAAa,KAAK,OAAL,CAAa,mBAAb,CAAiC,CAAjC,CAAb;AACA,aAAK,IAAL,GAAY,KAAK,OAAL,CAAa,kBAAb,EAAZ;AACA,aAAK,IAAL,CAAU,GAAV,CAAc,KAAd,GAAsB,CAAC,CAAvB;;AAEA,aAAK,KAAL,CAAW,OAAX,CAAmB,KAAK,MAAxB;;AAEA,YAAI,OAAO,IAAX;;AAEA,YAAI,MAAM,IAAI,cAAJ,EAAV;AACA,YAAI,IAAJ,CAAS,KAAT,EAAgB,KAAK,KAArB;AACA,YAAI,YAAJ,GAAmB,aAAnB;;AAEA,YAAI,MAAJ,GAAa,YAAW;AACpB,iBAAK,SAAL,GAAiB,IAAI,QAArB;;AAEA,oBAAQ,eAAR,CAAwB,KAAK,SAA7B,EAAwC,UAAS,MAAT,EAAiB;;AAEjD,qBAAK,GAAL,CAAS,MAAT,GAAkB,MAAlB;AACA,qBAAK,GAAL,CAAS,YAAT,CAAsB,KAAtB,GAA8B,CAA9B;;AAEA,qBAAK,MAAL,CAAY,OAAZ,CAAoB,QAAQ,WAA5B;AACA,qBAAK,MAAL,CAAY,IAAZ,CAAiB,KAAjB,GAAyB,CAAzB;AACA,qBAAK,GAAL,CAAS,IAAT,GAAgB,IAAhB;AAEH,aATL,EAUI,UAAS,CAAT,EAAW;AAAC,wBAAQ,GAAR,CAAY,oCAAoC,EAAE,GAAlD;AAAwD,aAVxE;AAWH,SAdD;;AAgBA,YAAI,IAAJ;AACA,aAAK,GAAL,CAAS,KAAT,CAAe,CAAf;AACH;;;;mCAEU;AACP,mBAAO,CAAC,EAAC,SAAQ,KAAK,KAAd,EAAD,EAAsB,EAAC,WAAU,KAAK,OAAhB,EAAtB,EAA+C,EAAC,aAAY,KAAK,KAAL,CAAW,SAAX,CAAqB,KAAlC,EAA/C,EAAwF,EAAC,iBAAgB,KAAK,QAAL,CAAc,IAAd,CAAmB,KAApC,EAAxF,EAAmI,EAAC,QAAO,KAAK,GAAL,CAAS,YAAT,CAAsB,KAA9B,EAAnI,EAAwK,EAAC,UAAS,KAAK,MAAL,CAAY,IAAZ,CAAiB,KAA3B,EAAxK,CAAP;AACH;;;oCAEW,O,EAAS;AACjB,gBAAI,OAAJ,EAAa;AACT;AACA,qBAAK,KAAL,CAAW,OAAX,CAAmB,KAAK,QAAxB;AACA,qBAAK,QAAL,CAAc,OAAd,CAAsB,KAAK,KAA3B;AACA,qBAAK,KAAL,CAAW,OAAX,CAAmB,KAAK,KAAxB,EAA+B,CAA/B,EAAkC,CAAlC;AACA,qBAAK,GAAL,CAAS,OAAT,CAAiB,KAAK,IAAtB;AACA,qBAAK,GAAL,CAAS,OAAT,CAAiB,KAAK,KAAtB;AACA,qBAAK,IAAL,CAAU,OAAV,CAAkB,KAAK,MAAvB;AACH,aARD,MAQO;AACH;AACA,qBAAK,GAAL,CAAS,OAAT,CAAiB,KAAK,MAAtB;AACH;AACJ;;;gCAEO,I,EAAM;AACV,iBAAK,KAAL,CAAW,SAAX,CAAqB,KAArB,GAA6B,IAA7B;AACH;;;oCAEW,G,EAAK;AACb,iBAAK,QAAL,CAAc,IAAd,CAAmB,KAAnB,GAA2B,GAA3B;AACH;;;+BAEM,I,EAAM;AACT,iBAAK,GAAL,CAAS,YAAT,CAAsB,KAAtB,GAA8B,IAA9B;AACH;;;4BAEG,C,EAAG;AACH,iBAAK,MAAL,CAAY,IAAZ,CAAiB,KAAjB,GAAyB,CAAzB;AACH","file":"playgroove.js","sourcesContent":["/**\r\n * Created by Mike on 8/25/16.\r\n */\r\n'use strict';\r\nclass Playgroove {\r\n\r\n    constructor(audio, context) {\r\n\r\n        this.audio = audio;\r\n        this.context = context;\r\n        this.src = this.context.createBufferSource();\r\n        this.delay = this.context.createDelay(1.0);\r\n        this.feedback = this.context.createGain();\r\n        this.volume = this.context.createGain();\r\n\r\n        this.merge = this.context.createChannelMerger(2);\r\n        this.panL = this.context.createStereoPanner();\r\n        this.panL.pan.value = -1;\r\n\r\n        this.merge.connect(this.volume);\r\n\r\n        let that = this;\r\n\r\n        let req = new XMLHttpRequest();\r\n        req.open('GET', this.audio);\r\n        req.responseType = 'arraybuffer';\r\n\r\n        req.onload = function() {\r\n            this.audioData = req.response;\r\n\r\n            context.decodeAudioData(this.audioData, function(buffer) {\r\n\r\n                    that.src.buffer = buffer;\r\n                    that.src.playbackRate.value = 1;\r\n\r\n                    that.volume.connect(context.destination);\r\n                    that.volume.gain.value = 0;\r\n                    that.src.loop = true;\r\n\r\n                },\r\n                function(e){console.log(\"Error with decoding audio data \" + e.err);});\r\n        };\r\n\r\n        req.send();\r\n        this.src.start(0);\r\n    }\r\n\r\n    toString() {\r\n        return [{\"audio\":this.audio},{\"context\":this.context},{\"delayTime\":this.delay.delayTime.value},{\"delayFeedback\":this.feedback.gain.value},{\"rate\":this.src.playbackRate.value},{\"volume\":this.volume.gain.value}];\r\n    }\r\n\r\n    delaySwitch(setting) {\r\n        if (setting) {\r\n            //console.log(\"delay on\");\r\n            this.delay.connect(this.feedback);\r\n            this.feedback.connect(this.delay);\r\n            this.delay.connect(this.merge, 0, 1);\r\n            this.src.connect(this.panL);\r\n            this.src.connect(this.delay);\r\n            this.panL.connect(this.volume);\r\n        } else {\r\n            //console.log(\"delay off\");\r\n            this.src.connect(this.volume);\r\n        }\r\n    }\r\n\r\n    delTime(time) {\r\n        this.delay.delayTime.value = time;\r\n    }\r\n\r\n    delFeedback(fbk) {\r\n        this.feedback.gain.value = fbk;\r\n    }\r\n\r\n    pbRate(rate) {\r\n        this.src.playbackRate.value = rate;\r\n    }\r\n\r\n    vol(v) {\r\n        this.volume.gain.value = v;\r\n    }\r\n\r\n}"]}