#!/usr/bin/env node

var app    = require("../app");
var server = require('http').Server(app);
var io	   = require('socket.io')(server);

const PORT = '9001';
const DEBUG = process.env.NODE_ENV === "development";

const User = require('./userEvents');
const users = {
    all: {},
    performers: [],
    audience: []
};
/**
*  Setting Numbers
*/
const newSetting = function() {
    const i = Math.floor(Math.random() * 29);
    console.info("Setting changed to " + i);
    return i;
};

var currentSetting = newSetting();

io.on('connection', function(socket){

    const user = new User(socket);

    const numberOfUsers = io.engine.clientsCount;
    console.info('users connected: ', numberOfUsers);

    socket.on('disconnect', () => {
        if (user.type && user.uuid && users.all[user.uuid]) {
            console.info('disconnecting user ', user.public_info());
            delete(users['all'][user.uuid]);
            // get index of user in array;
            const index = users[user.type].indexOf(user.uuid);
            delete(users[user.type][index]);
            user.disconnected();
            delete user;
        } else {
            console.info('unable to disconnet user', user.public_info());
        }
    })


    function emit(name, data) {
        DEBUG && console.info(name + ": ", data);
        socket.emit(name, data);
    }

    //TODO: I guess eventually, this should go outside of this function.
    // BUT, also it should go per "room", not overall - right?
    setInterval(function(){
        currentSetting = newSetting();
        // this socket is the part I'll need to consider.  It doesn't exist
        // above, so :/
        emit('setting', { currentSetting });
    }, 60 * 1000 * 30);

    function setupPerformer() {

        users.performers.push(user.uuid);

        socket.on('data', function(d) {
            socket.broadcast.emit('data', d);
        });
        socket.on('enter', function(d) {
            socket.broadcast.emit('enter', d);
        });
        socket.on('exit', function(d) {
            socket.broadcast.emit('exit', d);
        });
    }

    socket.on('login', function(d) {
        console.info('user logging in, ', d);
        const error = [];
        const { username, requestsPerformer } = d;

        // Validate user data
        if (!username || typeof username !== 'string') {
            console.info('invalid username', username);
            socket.emit('loggedin', { success: false, error: 'Invalid or missing username.' });
            return;
        }

        var userType = (requestsPerformer && Object.keys(users.performers.length < 4)) ?
            'performer' :
            'audience';

        user.join(username, userType);

        const public_user_info = user.public_info();
        user.connected();
        users.audience[user.uuid] = user;
        users.all[user.uuid] = public_user_info;

        if (userType === 'performer') setupPerformer();
        else users.audience.push(user.uuid);

        console.info('User logged in: ', public_user_info);
        socket.broadcast.emit('user.login', { users });

        socket.emit('loggedin', {
            success: true,
            user: public_user_info,
            users,
            currentSetting
        });

    });

    socket.on('logout', function(d) {
        console.log('logout', d);
        socket.broadcast.emit('user.exited', { users });
    });

});

console.log('connecting...');
server.listen(Number(PORT), function() {
    console.log('connected to port ' + PORT);
});

